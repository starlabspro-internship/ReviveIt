// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebUI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241202154510_UpdateCategory")]
    partial class UpdateCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9286),
                            Name = "Electronics Repair",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9286)
                        },
                        new
                        {
                            CategoryID = 2,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9288),
                            Name = "Furniture Restoration",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9289)
                        },
                        new
                        {
                            CategoryID = 3,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9290),
                            Name = "Home Appliance Repair",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9291)
                        },
                        new
                        {
                            CategoryID = 4,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9292),
                            Name = "Automotive Repair",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9292)
                        },
                        new
                        {
                            CategoryID = 5,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9294),
                            Name = "Plumbing Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9294)
                        },
                        new
                        {
                            CategoryID = 6,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9296),
                            Name = "Electrical Repairs",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9296)
                        },
                        new
                        {
                            CategoryID = 7,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9297),
                            Name = "Cleaning Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9298)
                        },
                        new
                        {
                            CategoryID = 8,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9299),
                            Name = "Carpentry",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9299)
                        },
                        new
                        {
                            CategoryID = 9,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9301),
                            Name = "Landscaping",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9301)
                        },
                        new
                        {
                            CategoryID = 10,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9303),
                            Name = "Painting",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9303)
                        },
                        new
                        {
                            CategoryID = 11,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9304),
                            Name = "Roofing",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9305)
                        },
                        new
                        {
                            CategoryID = 12,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9306),
                            Name = "HVAC Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9306)
                        },
                        new
                        {
                            CategoryID = 13,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9307),
                            Name = "Pest Control",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9308)
                        },
                        new
                        {
                            CategoryID = 14,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9309),
                            Name = "Moving Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9310)
                        },
                        new
                        {
                            CategoryID = 15,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9311),
                            Name = "Interior Design",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9311)
                        },
                        new
                        {
                            CategoryID = 16,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9313),
                            Name = "IT Support",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9313)
                        },
                        new
                        {
                            CategoryID = 17,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9314),
                            Name = "Handyman Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9315)
                        },
                        new
                        {
                            CategoryID = 18,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9316),
                            Name = "Masonry",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9316)
                        },
                        new
                        {
                            CategoryID = 19,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9318),
                            Name = "Welding",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9318)
                        },
                        new
                        {
                            CategoryID = 20,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9319),
                            Name = "Security Systems Installation",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9320)
                        },
                        new
                        {
                            CategoryID = 21,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9321),
                            Name = "Window Installation",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9321)
                        },
                        new
                        {
                            CategoryID = 22,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9323),
                            Name = "Flooring Installation",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9323)
                        },
                        new
                        {
                            CategoryID = 23,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9324),
                            Name = "Bathroom Remodeling",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9325)
                        },
                        new
                        {
                            CategoryID = 24,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9326),
                            Name = "Kitchen Remodeling",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9326)
                        },
                        new
                        {
                            CategoryID = 25,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9328),
                            Name = "Solar Panel Installation",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9328)
                        },
                        new
                        {
                            CategoryID = 26,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9329),
                            Name = "Tree Trimming",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9330)
                        },
                        new
                        {
                            CategoryID = 27,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9331),
                            Name = "Pool Maintenance",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9332)
                        },
                        new
                        {
                            CategoryID = 28,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9333),
                            Name = "Locksmith Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9333)
                        },
                        new
                        {
                            CategoryID = 29,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9335),
                            Name = "Event Planning",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9336)
                        },
                        new
                        {
                            CategoryID = 30,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9337),
                            Name = "Photography",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9337)
                        },
                        new
                        {
                            CategoryID = 31,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9338),
                            Name = "Tutoring",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9339)
                        },
                        new
                        {
                            CategoryID = 32,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9340),
                            Name = "Courier Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9341)
                        },
                        new
                        {
                            CategoryID = 33,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9342),
                            Name = "Legal Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9342)
                        },
                        new
                        {
                            CategoryID = 34,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9343),
                            Name = "Accounting Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9344)
                        },
                        new
                        {
                            CategoryID = 35,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9345),
                            Name = "Health and Fitness",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9345)
                        },
                        new
                        {
                            CategoryID = 36,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9347),
                            Name = "Child Care",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9347)
                        },
                        new
                        {
                            CategoryID = 37,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9348),
                            Name = "Elderly Care",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9349)
                        },
                        new
                        {
                            CategoryID = 38,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9350),
                            Name = "Pressure Washing",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9350)
                        },
                        new
                        {
                            CategoryID = 39,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9351),
                            Name = "Junk Removal",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9352)
                        },
                        new
                        {
                            CategoryID = 40,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9353),
                            Name = "Commercial Cleaning",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9353)
                        },
                        new
                        {
                            CategoryID = 41,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9355),
                            Name = "Digital Marketing",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9355)
                        },
                        new
                        {
                            CategoryID = 42,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9356),
                            Name = "SEO Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9357)
                        },
                        new
                        {
                            CategoryID = 43,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9358),
                            Name = "Social Media Management",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9358)
                        },
                        new
                        {
                            CategoryID = 44,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9360),
                            Name = "Web Development",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9360)
                        },
                        new
                        {
                            CategoryID = 45,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9361),
                            Name = "Graphic Design",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9361)
                        },
                        new
                        {
                            CategoryID = 46,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9363),
                            Name = "Content Writing",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9363)
                        },
                        new
                        {
                            CategoryID = 47,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9364),
                            Name = "Video Editing",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9365)
                        },
                        new
                        {
                            CategoryID = 48,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9366),
                            Name = "3D Printing",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9366)
                        },
                        new
                        {
                            CategoryID = 49,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9367),
                            Name = "Custom Software Development",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9368)
                        },
                        new
                        {
                            CategoryID = 50,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9369),
                            Name = "Mobile App Development",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9369)
                        },
                        new
                        {
                            CategoryID = 51,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9371),
                            Name = "Photography Editing",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9371)
                        },
                        new
                        {
                            CategoryID = 52,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9372),
                            Name = "Data Entry Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9372)
                        },
                        new
                        {
                            CategoryID = 53,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9374),
                            Name = "Virtual Assistance",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9374)
                        },
                        new
                        {
                            CategoryID = 54,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9375),
                            Name = "Business Consulting",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9376)
                        },
                        new
                        {
                            CategoryID = 55,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9423),
                            Name = "Market Research",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9424)
                        },
                        new
                        {
                            CategoryID = 56,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9425),
                            Name = "Project Management",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9426)
                        },
                        new
                        {
                            CategoryID = 57,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9427),
                            Name = "Branding",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9427)
                        },
                        new
                        {
                            CategoryID = 58,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9428),
                            Name = "Event Coordination",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9429)
                        },
                        new
                        {
                            CategoryID = 59,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9430),
                            Name = "Public Relations",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9430)
                        },
                        new
                        {
                            CategoryID = 60,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9432),
                            Name = "Translation Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9432)
                        },
                        new
                        {
                            CategoryID = 61,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9433),
                            Name = "Voiceover Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9434)
                        },
                        new
                        {
                            CategoryID = 62,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9435),
                            Name = "Legal Consultation",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9435)
                        },
                        new
                        {
                            CategoryID = 63,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9437),
                            Name = "Property Management",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9437)
                        },
                        new
                        {
                            CategoryID = 64,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9438),
                            Name = "Real Estate Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9439)
                        },
                        new
                        {
                            CategoryID = 65,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9440),
                            Name = "Insurance Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9440)
                        },
                        new
                        {
                            CategoryID = 66,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9441),
                            Name = "Financial Planning",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9442)
                        },
                        new
                        {
                            CategoryID = 67,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9443),
                            Name = "Investment Advice",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9443)
                        },
                        new
                        {
                            CategoryID = 68,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9445),
                            Name = "Tax Preparation",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9445)
                        },
                        new
                        {
                            CategoryID = 69,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9446),
                            Name = "Debt Counseling",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9447)
                        },
                        new
                        {
                            CategoryID = 70,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9448),
                            Name = "Retirement Planning",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9448)
                        },
                        new
                        {
                            CategoryID = 71,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9450),
                            Name = "Mortgage Advice",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9450)
                        },
                        new
                        {
                            CategoryID = 72,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9451),
                            Name = "Estate Planning",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9452)
                        },
                        new
                        {
                            CategoryID = 73,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9453),
                            Name = "Human Resources",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9453)
                        },
                        new
                        {
                            CategoryID = 74,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9455),
                            Name = "Recruitment Services",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9455)
                        },
                        new
                        {
                            CategoryID = 75,
                            CreatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9456),
                            Name = "Employee Training",
                            UpdatedAt = new DateTime(2024, 12, 2, 15, 45, 10, 278, DateTimeKind.Utc).AddTicks(9456)
                        });
                });

            modelBuilder.Entity("Domain.Entities.JobApplication", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationID");

                    b.HasIndex("JobID");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("Domain.Entities.Jobs", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobID"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JobID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.Messages", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RecipientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("MessageID");

                    b.HasIndex("RecipientID");

                    b.HasIndex("SenderID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Entities.Reviews", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServiceID");

                    b.HasIndex("UserId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Entities.Subscriptions", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Expertise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("Domain.Entities.Jobs", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Jobs", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Messages", b =>
                {
                    b.HasOne("Users", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Users", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Entities.Reviews", b =>
                {
                    b.HasOne("Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Subscriptions", b =>
                {
                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.Jobs", b =>
                {
                    b.Navigation("JobApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
