// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebUI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241203085809_Add-UserCategory-Table")]
    partial class AddUserCategoryTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9075),
                            Name = "Electronics Repair",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9077)
                        },
                        new
                        {
                            CategoryID = 2,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9084),
                            Name = "Furniture Restoration",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9086)
                        },
                        new
                        {
                            CategoryID = 3,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9091),
                            Name = "Home Appliance Repair",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9092)
                        },
                        new
                        {
                            CategoryID = 4,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9097),
                            Name = "Automotive Repair",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9099)
                        },
                        new
                        {
                            CategoryID = 5,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9104),
                            Name = "Plumbing Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9105)
                        },
                        new
                        {
                            CategoryID = 6,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9110),
                            Name = "Electrical Repairs",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9112)
                        },
                        new
                        {
                            CategoryID = 7,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9117),
                            Name = "Cleaning Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9119)
                        },
                        new
                        {
                            CategoryID = 8,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9173),
                            Name = "Carpentry",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9175)
                        },
                        new
                        {
                            CategoryID = 9,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9179),
                            Name = "Landscaping",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9181)
                        },
                        new
                        {
                            CategoryID = 10,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9186),
                            Name = "Painting",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9187)
                        },
                        new
                        {
                            CategoryID = 11,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9192),
                            Name = "Roofing",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9194)
                        },
                        new
                        {
                            CategoryID = 12,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9198),
                            Name = "HVAC Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9200)
                        },
                        new
                        {
                            CategoryID = 13,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9205),
                            Name = "Pest Control",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9206)
                        },
                        new
                        {
                            CategoryID = 14,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9211),
                            Name = "Moving Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9212)
                        },
                        new
                        {
                            CategoryID = 15,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9217),
                            Name = "Interior Design",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9218)
                        },
                        new
                        {
                            CategoryID = 16,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9224),
                            Name = "IT Support",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9226)
                        },
                        new
                        {
                            CategoryID = 17,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9230),
                            Name = "Handyman Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9232)
                        },
                        new
                        {
                            CategoryID = 18,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9237),
                            Name = "Masonry",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9238)
                        },
                        new
                        {
                            CategoryID = 19,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9242),
                            Name = "Welding",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9244)
                        },
                        new
                        {
                            CategoryID = 20,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9249),
                            Name = "Security Systems Installation",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9250)
                        },
                        new
                        {
                            CategoryID = 21,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9255),
                            Name = "Window Installation",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9256)
                        },
                        new
                        {
                            CategoryID = 22,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9261),
                            Name = "Flooring Installation",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9262)
                        },
                        new
                        {
                            CategoryID = 23,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9267),
                            Name = "Bathroom Remodeling",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9268)
                        },
                        new
                        {
                            CategoryID = 24,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9273),
                            Name = "Kitchen Remodeling",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9274)
                        },
                        new
                        {
                            CategoryID = 25,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9279),
                            Name = "Solar Panel Installation",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9281)
                        },
                        new
                        {
                            CategoryID = 26,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9286),
                            Name = "Tree Trimming",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9287)
                        },
                        new
                        {
                            CategoryID = 27,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9292),
                            Name = "Pool Maintenance",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9293)
                        },
                        new
                        {
                            CategoryID = 28,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9298),
                            Name = "Locksmith Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9299)
                        },
                        new
                        {
                            CategoryID = 29,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9304),
                            Name = "Event Planning",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9305)
                        },
                        new
                        {
                            CategoryID = 30,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9309),
                            Name = "Photography",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9311)
                        },
                        new
                        {
                            CategoryID = 31,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9315),
                            Name = "Tutoring",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9317)
                        },
                        new
                        {
                            CategoryID = 32,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9321),
                            Name = "Courier Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9323)
                        },
                        new
                        {
                            CategoryID = 33,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9327),
                            Name = "Legal Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9329)
                        },
                        new
                        {
                            CategoryID = 34,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9333),
                            Name = "Accounting Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9335)
                        },
                        new
                        {
                            CategoryID = 35,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9340),
                            Name = "Health and Fitness",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9341)
                        },
                        new
                        {
                            CategoryID = 36,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9346),
                            Name = "Child Care",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9347)
                        },
                        new
                        {
                            CategoryID = 37,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9352),
                            Name = "Elderly Care",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9353)
                        },
                        new
                        {
                            CategoryID = 38,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9358),
                            Name = "Pressure Washing",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9359)
                        },
                        new
                        {
                            CategoryID = 39,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9364),
                            Name = "Junk Removal",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9365)
                        },
                        new
                        {
                            CategoryID = 40,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9370),
                            Name = "Commercial Cleaning",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9371)
                        },
                        new
                        {
                            CategoryID = 41,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9375),
                            Name = "Digital Marketing",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9377)
                        },
                        new
                        {
                            CategoryID = 42,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9381),
                            Name = "SEO Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9383)
                        },
                        new
                        {
                            CategoryID = 43,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9387),
                            Name = "Social Media Management",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9389)
                        },
                        new
                        {
                            CategoryID = 44,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9394),
                            Name = "Web Development",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9395)
                        },
                        new
                        {
                            CategoryID = 45,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9399),
                            Name = "Graphic Design",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9401)
                        },
                        new
                        {
                            CategoryID = 46,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9406),
                            Name = "Content Writing",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9407)
                        },
                        new
                        {
                            CategoryID = 47,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9411),
                            Name = "Video Editing",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9413)
                        },
                        new
                        {
                            CategoryID = 48,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9417),
                            Name = "3D Printing",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9419)
                        },
                        new
                        {
                            CategoryID = 49,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9423),
                            Name = "Custom Software Development",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9424)
                        },
                        new
                        {
                            CategoryID = 50,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9429),
                            Name = "Mobile App Development",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9430)
                        },
                        new
                        {
                            CategoryID = 51,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9434),
                            Name = "Photography Editing",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9436)
                        },
                        new
                        {
                            CategoryID = 52,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9440),
                            Name = "Data Entry Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9442)
                        },
                        new
                        {
                            CategoryID = 53,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9446),
                            Name = "Virtual Assistance",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9448)
                        },
                        new
                        {
                            CategoryID = 54,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9452),
                            Name = "Business Consulting",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9454)
                        },
                        new
                        {
                            CategoryID = 55,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9458),
                            Name = "Market Research",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9460)
                        },
                        new
                        {
                            CategoryID = 56,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9464),
                            Name = "Project Management",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9466)
                        },
                        new
                        {
                            CategoryID = 57,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9470),
                            Name = "Branding",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9471)
                        },
                        new
                        {
                            CategoryID = 58,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9476),
                            Name = "Event Coordination",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9478)
                        },
                        new
                        {
                            CategoryID = 59,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9482),
                            Name = "Public Relations",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9483)
                        },
                        new
                        {
                            CategoryID = 60,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9488),
                            Name = "Translation Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9489)
                        },
                        new
                        {
                            CategoryID = 61,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9494),
                            Name = "Voiceover Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9495)
                        },
                        new
                        {
                            CategoryID = 62,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9500),
                            Name = "Legal Consultation",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9501)
                        },
                        new
                        {
                            CategoryID = 63,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9506),
                            Name = "Property Management",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9507)
                        },
                        new
                        {
                            CategoryID = 64,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9511),
                            Name = "Real Estate Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9513)
                        },
                        new
                        {
                            CategoryID = 65,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9517),
                            Name = "Insurance Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9519)
                        },
                        new
                        {
                            CategoryID = 66,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9523),
                            Name = "Financial Planning",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9525)
                        },
                        new
                        {
                            CategoryID = 67,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9529),
                            Name = "Investment Advice",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9531)
                        },
                        new
                        {
                            CategoryID = 68,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9535),
                            Name = "Tax Preparation",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9536)
                        },
                        new
                        {
                            CategoryID = 69,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9541),
                            Name = "Debt Counseling",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9542)
                        },
                        new
                        {
                            CategoryID = 70,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9547),
                            Name = "Retirement Planning",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9548)
                        },
                        new
                        {
                            CategoryID = 71,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9552),
                            Name = "Mortgage Advice",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9554)
                        },
                        new
                        {
                            CategoryID = 72,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9558),
                            Name = "Estate Planning",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9559)
                        },
                        new
                        {
                            CategoryID = 73,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9563),
                            Name = "Human Resources",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9565)
                        },
                        new
                        {
                            CategoryID = 74,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9569),
                            Name = "Recruitment Services",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9571)
                        },
                        new
                        {
                            CategoryID = 75,
                            CreatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9575),
                            Name = "Employee Training",
                            UpdatedAt = new DateTime(2024, 12, 3, 8, 58, 6, 764, DateTimeKind.Utc).AddTicks(9576)
                        });
                });

            modelBuilder.Entity("Domain.Entities.JobApplication", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationID");

                    b.HasIndex("JobID");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("Domain.Entities.Jobs", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobID"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JobID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.Messages", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RecipientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("MessageID");

                    b.HasIndex("RecipientID");

                    b.HasIndex("SenderID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Entities.Reviews", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServiceID");

                    b.HasIndex("UserId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Entities.Subscriptions", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.Entities.UserCategory", b =>
                {
                    b.Property<int>("UserCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Expertise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("Domain.Entities.Jobs", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Jobs", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Messages", b =>
                {
                    b.HasOne("Users", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Users", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Entities.Reviews", b =>
                {
                    b.HasOne("Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Subscriptions", b =>
                {
                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserCategory", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany("UserCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users", "User")
                        .WithMany("UserCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("UserCategories");
                });

            modelBuilder.Entity("Domain.Entities.Jobs", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.Navigation("UserCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
